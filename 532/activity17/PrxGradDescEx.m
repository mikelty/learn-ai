%% Proximal gradient descent trajectories
%% prepare workspace

close all
clear

%% Least Squares Problem

U = [1 0; 0 1; 0 0; 0 0];
S = [1 0; 0 0.5];
V = 1/sqrt(2)*[1 1; 1 -1];
X = U*S*V';

y = [sqrt(2); 0; 1; 0];


%% Find optimum w

w = V*inv(S)*U'*y;

disp('Optimum Weights')
disp(w)

c = y'*y -y'*X*w;

%% Find values for contour plot of surface

x1 = [-1:.01:3];  % range -1 to 3 
x2 = [-1:.01:3];

for i =1:length(x1)
    for j = 1:length(x2)
        t = [ x1(j);x2(i) ];
        z(i,j) = (t-w)'*X'*X*(t-w) +c;
    end
end

%% Find and display weights generated by gradient descent

winit = [-1;1];
lam = 0.5;

it = 20;
tau = 0.5;

[W,Z] = prxgraddescent2(X,y,tau,lam,winit,it);

% Concatenate gradient and regularization steps to display trajectory
for i = 1:it
    G(:,2*(i-1)+1:2*i)= [W(:,i),Z(:,i+1)];
end

figure
contour(x1,x2,z,20)
hold on
plot(w(1),w(2),'s', Z(1,2:it),Z(2,2:it),'bx', W(1,:),W(2,:),'ro',G(1,:),G(2,:),'-c','linewidth',2)
legend('Cost Function','Optimum Weights','Gradient Descent Step', 'Regularization Step')
ax = gca; % current axes
ax.FontSize = 14;
xlim([-1,3])
xlabel('w_1')
ylim([-1,3])
ylabel('w_2')
title(['\tau = ',num2str(tau), ', \lambda = ',num2str(lam)])

%% Second Case

